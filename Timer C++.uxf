<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>310</x>
      <y>270</y>
      <w>310</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>Timer
--
-executionTime : clock_t
--
+startTimer() : void
+stopTimer() : void
+resetTimer() : void
+displayTimer() : void
+getExecutionTimeInMicroSeconds : long
+Timer() : constructor

bg=black
transparency=1
fg=white</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>30</x>
      <y>110</y>
      <w>270</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>IntNode
--
-nodeData : int
-nodePointer : IntNode *

--
+getNodeData() : int
+getNodePointer() : IntNode *
+setNodeData(int) : void
+setNodePointer(IntNode *) : void

+IntNode() : constructor
+IntNode(int) : constructor
+IntNode(int, IntNode*) : constructor

bg=black
transparency=1
fg=white</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>30</x>
      <y>30</y>
      <w>190</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>Created by 
Jacob Osborne
bg=black
transparency=1
fg=white</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>30</x>
      <y>350</y>
      <w>270</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>Class
--
Data Members
--
Methods/Constructors

bg=black
transparency=1
fg=white</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>310</x>
      <y>110</y>
      <w>310</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
-head : IntNode*
-size : int
--
+IntNodeArray(int) : constructor
+getSize() : int
+getSize() : int
+getFromIndex(int) : int
+setAtIndex(int index, int value) : void
bg=black
transparency=1
fg=white</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>630</x>
      <y>110</y>
      <w>610</w>
      <h>330</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
-front : Node&lt;Type&gt; *
-size : int
--
+Array() : default constructor
+Array&lt;Type&gt;(int size) : constructor

+ ~Array&lt;Type&gt;() : destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor

+getSize() const : int
+getFront() const : Node&lt;Type&gt; *

+getFromIndex(int index) : Type
+setAtIndex(int index, Type value) : void

bg=black
transparency=1
fg=white</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>630</x>
      <y>450</y>
      <w>610</w>
      <h>310</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt; *

--
+List&lt;Type&gt;() : constructor
+List&lt;Type&gt;(const List&lt;Type&gt; &amp; source) : copy constructor
+ ~List&lt;Type&gt;() : destructor

+ addAtIndex(int index, Type value) : void
+ addFront(Type value): void
+ addEnd(Type value): void
+ add(Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+ getSize() const : int
+ getFront() const : Node&lt;Type&gt; *

bg=black
transparency=1
fg=white</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>610</x>
      <y>110</y>
      <w>240</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
fg=white
bg=black</panel_attributes>
    <additional_attributes>220.0;10.0;20.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>980</x>
      <y>110</y>
      <w>250</w>
      <h>370</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
fg=white
bg=black</panel_attributes>
    <additional_attributes>40.0;350.0;230.0;350.0;230.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>30</x>
      <y>450</y>
      <w>590</w>
      <h>310</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
-nodeData : Type
-nodePointer : Node&lt;Type&gt; *
--
Constructors
+Node&lt;Type&gt;() : constructor
+Node&lt;Type&gt;(Type value) : constructor
+Node&lt;Type&gt;(Type value, Node&lt;Type&gt; * next) : constructor

Accessors

+getNodeData() : Type
+getNodePointer() : Node&lt;Type&gt;*
+setNodeData(Type value) : void
+setNodePointer(Node&lt;Type&gt; * next) : void

bg=black
transparency=1
fg=white</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>30</x>
      <y>770</y>
      <w>590</w>
      <h>360</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
-nodeData : Type
-nextPointer : BiDirectionalNode&lt;Type&gt; *
-previousPointer : BiDirectionalNode&lt;Type&gt; *
--
Constructors
+BiDirectionalNode&lt;Type&gt;() : constructor
+BiDirectionalNode&lt;Type&gt;(Type value) : constructor
+BiDirectionalNode&lt;Type&gt;(Type value, Node&lt;Type&gt; * next) : constructor

Accessors 

+getNodeData() : Type
+getNodePointer() : Node&lt;Type&gt; *
+setNodeData(Type value) : void
+setNodePointer(Node &lt;Type&gt; * next) : void

bg=black
transparency=1
fg=white</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>310</x>
      <y>470</y>
      <w>310</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
fg=white
bg=black</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0;290.0;60.0;290.0;260.0;10.0;300.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>630</x>
      <y>770</y>
      <w>610</w>
      <h>360</h>
    </coordinates>
    <panel_attributes>DoublyLinkedList&lt;Type&gt;
--
-size : int
-front : BiDirectionalNode&lt;Type&gt;*
-end : BiDirectionalNode&lt;Type&gt;*
--

Non-Virtual Methods
+getSize() const : int
+getFront() const : BiDirectionalNode&lt;Type&gt; *
+getEnd() const : BiDirectionalNode&lt;Type&gt; *

Virtual Methods
add(Type value)
remove(int)
bg=black
transparency=1
fg=white</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>410</x>
      <y>770</y>
      <w>450</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
fg=white
bg=black</panel_attributes>
    <additional_attributes>430.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1230</x>
      <y>620</y>
      <w>150</w>
      <h>290</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.

fg=white
bg=black</panel_attributes>
    <additional_attributes>10.0;270.0;130.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>940</x>
      <y>820</y>
      <w>440</w>
      <h>340</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.
fg=white
bg=black</panel_attributes>
    <additional_attributes>10.0;320.0;420.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>190</x>
      <y>110</y>
      <w>140</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.
fg=white
bg=black</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;10.0;90.0;170.0;120.0;170.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1230</x>
      <y>980</y>
      <w>150</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.
fg=white
bg=black</panel_attributes>
    <additional_attributes>10.0;10.0;130.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1360</x>
      <y>550</y>
      <w>290</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>Model :: Queue
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ Queue() : constructor
+ ~Queue() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ enqueue(Type data) : void
+ dequeue() : Type
+ peek() : Type

bg=black
transparency=1
fg=white</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1360</x>
      <y>790</y>
      <w>290</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>Model :: Stack&lt;Type&gt;
--
- front: BiDirectionalNode&lt;Type&gt; *
- end: BiDirectionalNode&lt;Type&gt; *
- size : int

--
+ Stack() : constructor
+ ~Stack() : destructor

+ push(Type data) : void
+ pop() : Type
+ peek() : Type

+ add(Type data) : void
+ remove(int index) : Type
bg=black
transparency=1
fg=white</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1360</x>
      <y>1040</y>
      <w>290</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>Model :: CircularlyLinkedList
--
- front: BiDirectionalNode&lt;Type&gt;*
- end: BIDirectionalNode&lt;Type&gt;*
- size: int
--
+ CircularList() : constructor
+ ~CircularList() : destructor

+ add(Type data) : void
+ remmove(int index, Type data) : void

bg=black
transparency=1
fg=white</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1250</x>
      <y>110</y>
      <w>610</w>
      <h>330</h>
    </coordinates>
    <panel_attributes>BinarySearchTreeNode&lt;Type&gt;
--
-nodeData : Type(inherited)
-rootPointer : TreeNode&lt;Type&gt; *
-leftChildPointer : BinarySearhTreeNode&lt;Type&gt; *
-rightChildPointer : BinarySearchTreeNode&lt;Type&gt; *
--

+getRootPointer() : BinarySearchTreeNode&lt;Type&gt; *
+getLeftChildPointer() : BinarySearchTreeNode&lt;Type&gt; *
+getRightChildPosition() : BinaarySearhTreeNode&lt;Type&gt; *

+setRootChildPointer(BinarySearchTreeNode&lt;Type&gt; * root) : void
+setLeftChildPointer(BinarySearchTreeNode&lt;Type&gt; * left) : void
+setRightChildPointer(BinarySearchTreeNode&lt;Type&gt; * right) : void

bg=black
transparency=1
fg=white</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>630</x>
      <y>1140</y>
      <w>610</w>
      <h>370</h>
    </coordinates>
    <panel_attributes>BinarySearchTreeNode&lt;Type&gt;
--
-nodeData : Type(inherited)
-rootPointer : TreeNode&lt;Type&gt; *
-leftChildPointer : BinarySearhTreeNode&lt;Type&gt; *
-rightChildPointer : BinarySearchTreeNode&lt;Type&gt; *
--


+getRootPointer() : BinarySearchTreeNode&lt;Type&gt; *
+getLeftChildPointer() : BinarySearchTreeNode&lt;Type&gt; *
+getRightChildPosition() : BinaarySearhTreeNode&lt;Type&gt; *

+setRootChildPointer(BinarySearchTreeNode&lt;Type&gt; * root) : void
+setLeftChildPointer(BinarySearchTreeNode&lt;Type&gt; * left) : void
+setRightChildPointer(BinarySearchTreeNode&lt;Type&gt; * right) : void

bg=black
transparency=1
fg=white</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>10</x>
      <y>0</y>
      <w>2510</w>
      <h>2390</h>
    </coordinates>
    <panel_attributes>bg=black
transparency = 0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>30</x>
      <y>1140</y>
      <w>590</w>
      <h>370</h>
    </coordinates>
    <panel_attributes>Model :: Tree&lt;Type&gt;
--

-size : int
-height : int
-complete : bool
-balanced : bool

--
+getSize() : int
+getHeight() : int
+isComplete() : bool
+isBalanced() : bool

+setSize(int size) : void
+setHeight(int height) : void
+setComplete(bool complete) : void
+setBalanced(bool balanced) : void

+inOrderTraversal() : void
+preOrderTraversal() : void
+postOrderTraversal() : void

bg=black
transparency=1
fg=white
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>30</x>
      <y>1520</y>
      <w>590</w>
      <h>590</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTree&lt;Type&gt;
--
-root : BinarySearchTreeNode&lt;Type&gt;*
--
+ BinarySearchTree() : constructor
+ ~BinarySearchTree() : destructor

+getRott() : BinarySearchTreeNode&lt;Type&gt;*
+setRoot(BinarySearchTreeNode&lt;Type&gt; * rott) : void

*Recursive Helper Methods*
# calculateSize(BinarySearchTreeNode&lt;Type&gt;*) : int
# calculateHeight(BinarySearchTreeNode&lt;Type&gt;*) : int
# isComplete(BinarySearchTreeNode&lt;Type&gt; *) : bool
# isBalanced(BinarySearchTreeNode&lt;Type&gt; *) : bool

# removeNode(BinarySearchTreeNode&lt;Type&gt; *) : void

# inOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
# preOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
# postOrderTraversal(BinarySearchTreeNode&lt;Type&gt; : void

*Informational*
+getSize() : int
+getHeight() : int
+isBalanced() : bool
+isComplete() : bool

*Traversal*
+inOrderTraversal() : void
+preOrderTraversal() : void
+postOrderTraversal() : void

*Data Operations*
+insert(Type) : void
+contains(Type) : void
+remove(Type) : void

bg=black
transparency=1
fg=white</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
